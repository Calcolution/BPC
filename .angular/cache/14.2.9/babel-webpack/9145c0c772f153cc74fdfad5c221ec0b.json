{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\n/**\n* this service provides CRUD functionality for user objects\n*/\n\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(storageService) {\n      this.storageService = storageService;\n      this._profile_key = 'selectedProfile';\n      this.profileSubject = new BehaviorSubject(JSON.parse(storageService.get(this._profile_key)));\n      this.profile = this.profileSubject.asObservable();\n    }\n    /**\n    * Helper method to set the selected profile for future purposes.\n    * @param profile the profile to set\n    */\n\n\n    setSelectedProfile(profile) {\n      this.storageService.set(this._profile_key, JSON.stringify(profile));\n      this.profileSubject.next(profile);\n    }\n    /**\n     * Helper method to get an observable to wait on the selected profile\n     *\n     * @returns observable of profile\n     */\n\n\n    getSelectedProfile() {\n      return this.profile;\n    }\n    /**\n    * Method to get the profile of a user based on a stakeholder\n    * @param user user with a potential profile\n    * @param stakeholder stakeholder to find the profile for\n    * @return matching profile of the user\n    *\n    */\n\n\n    getProfileByStakeholder(user, stakeholder) {\n      if (!stakeholder || !user) {\n        return;\n      }\n\n      let result;\n      user.profiles.forEach(p => {\n        if (p.stakeholder && p.stakeholder.id == stakeholder.id) {\n          result = p;\n        }\n      });\n      return result;\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.StorageService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}