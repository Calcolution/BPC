{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nimport * as i2 from \"../services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../repository/repository\";\n/**\n* This service provides functionality for handling the authorisation of an user\n*/\n\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(storageService, userService, router, userRepository) {\n      this.storageService = storageService;\n      this.userService = userService;\n      this.router = router;\n      this.userRepository = userRepository;\n      this._user_storage_key = 'user';\n      this.userSubject = new BehaviorSubject(JSON.parse(storageService.get(this._user_storage_key)));\n      this.user = this.userSubject.asObservable();\n    }\n    /**\n     * Helper function to get the current user\n     *\n     * @returns user object\n     */\n\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n    /**\n     * Helper function to get an observable to wait on a user\n     *\n     * @returns observable of user\n     */\n\n\n    getUser() {\n      return this.user;\n    }\n    /**\n     * Login function performing request and session handling\n     *\n     * @param username username (in our case email)\n     * @param password password of the user\n     * @returns an observable of the user\n     */\n\n\n    login(username, password) {\n      let user = this.userRepository.login(username, password);\n      this.storageService.clear();\n      this.storageService.set(this._user_storage_key, JSON.stringify(user));\n      this.userService.setSelectedProfile(user.profiles[0]);\n      this.userSubject.next(user);\n      return of(user);\n    }\n    /**\n    * Method to logout user and destroy session\n    */\n\n\n    logout() {\n      this.storageService.clear();\n      this.userSubject.next(null);\n      return this.router.navigate(['/login']);\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.UserRepository));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}